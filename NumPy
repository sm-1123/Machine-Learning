--------------------------------------date:30/06/2024----------------------------------------------------

#Basic-Operations

..Using Python Lists..

import numpy as np

array_1d = np.array([1,2,3,4,5])

array_2d = np.array([[1,2,3,4,5],[6,7,8,9,10]])

array_3d = np.array([[[1,2,3,4,5],[6,7,8,9,10]],[[11,12,13,14,15],[16,17,18,19,20]]])

print("one-dimensional array:\n",array_1d,"\n\n")

print("two-dimensional array:\n",array_2d,"\n\n")

print("three-dimensional array",array_3d,"\n\n")

OP--
one-dimensional array:
 [1 2 3 4 5] 


two-dimensional array:
 [[ 1  2  3  4  5]
 [ 6  7  8  9 10]] 


three-dimensional array [[[ 1  2  3  4  5]
  [ 6  7  8  9 10]]

 [[11 12 13 14 15]
  [16 17 18 19 20]]] 

--Using Functions available in the NumPy Package--

import numpy as np
​
array1 = np.arange(6)
​
print(array1,"\n")
​
array2 = np.arange(4, 16, 2)
​
print(array2,"\n")
​
array3 = np.arange(4.2, 5, 0.2, dtype = 'float')
​
print(array3,"\n")

OP--

[0 1 2 3 4 5] 

[ 4  6  8 10 12 14] 

[4.2 4.4 4.6 4.8] 

--NumPy.eye--

import numpy as np
​
array1 = np.eye(3)
​
print(array1,"\n")
​
array2 = np.eye(4, 5)
​
print(array2,"\n")

OP:

[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]] 

[[1. 0. 0. 0. 0.]
 [0. 1. 0. 0. 0.]
 [0. 0. 1. 0. 0.]
 [0. 0. 0. 1. 0.]] 

--NumPy.diag--

import numpy as np
​
array1 = np.diag([4,5,6,7])
​
print(array1,"\n")
​
array2 = np.diag([4,5,6], 2)
​
print(array2,"\n")
​
array3 = np.diag(np.array([[1,2],[3,4]]))
​
print(array3,"\n")

OP-

[[4 0 0 0]
 [0 5 0 0]
 [0 0 6 0]
 [0 0 0 7]] 

[[0 0 4 0 0]
 [0 0 0 5 0]
 [0 0 0 0 6]
 [0 0 0 0 0]
 [0 0 0 0 0]] 

[1 4] 

--General Functions to create arrays--

import numpy as np
​
array1 = np.zeros((4,5))
print("Array1:\n",array1,"\n")
​
array2 = np.zeros((3, 2, 2))
print("Array2:\n", array2, "\n")
​
array3 = np.ones((2, 3))
print("Array3:\n", array3, "\n")
​
array4 = np.ones((4, 3, 2))
print("Array4:\n", array4, "\n")
​
array5 = np.random.rand(3,2)
print("Array5:\n", array5, "\n")
​
array6 = np.random.rand(2, 2, 3)
print("Array6:\n", array6, "\n")

Array1:
 [[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]] 

Array2:
 [[[0. 0.]
  [0. 0.]]

 [[0. 0.]
  [0. 0.]]

 [[0. 0.]
  [0. 0.]]] 

Array3:
 [[1. 1. 1.]
 [1. 1. 1.]] 

Array4:
 [[[1. 1.]
  [1. 1.]
  [1. 1.]]

 [[1. 1.]
  [1. 1.]
  [1. 1.]]

 [[1. 1.]
  [1. 1.]
  [1. 1.]]

 [[1. 1.]
  [1. 1.]
  [1. 1.]]] 

OP:
Array5:
 [[0.24933419 0.71629229]
 [0.57576651 0.26428002]
 [0.42406954 0.36365501]] 

Array6:
 [[[0.0781685  0.6916443  0.15121047]
  [0.44929717 0.71678412 0.99676292]]

 [[0.75110745 0.25304031 0.82793972]
  [0.58526911 0.84239861 0.4209105 ]]] 

​--Sort--

import numpy as np
​
array1 = np.array([12, 1, 60, 45, 56, 3])
sorted_array1 = np.sort(array1)
print("Sorted Array:\n", sorted_array1,"\n")
​
array2 = np.array([[12, 45, 2],[4, 56, 9]])
sorted_array2 = np.sort(array2, axis=0)
print("Column sorted 2-D array", sorted_array2,"\n")
​
sorted_array3 = np.sort(array2, axis=1)
print("Row sorted 2-D array", sorted_array3, "\n")

OP:
Sorted Array:
 [ 1  3 12 45 56 60] 

Column sorted 2-D array [[ 4 45  2]
 [12 56  9]] 

Row sorted 2-D array [[ 2 12 45]
 [ 4  9 56]] 

--Reverse--

import numpy as np
​
array1 = np.array([2,4,5,7,89])
rev_array1 = np.flip(array1)
print("Reversed 1-D Matrix:\n", rev_array1, "\n")
​
array2 = np.array([[1,4,6,8,2],[4,56,78,89,90],[23,45,2,5,34],[2,1,0,45,22]])
rev_rows_array2 = np.flip(array2, axis=0)
print("Row reversed 2-D Matrix:\n", rev_rows_array2,"\n")
​
rev_cols_array2 = np.flip(array2, axis=1)
print("column reversed 2-D matrix:\n", rev_cols_array2, "\n")
​
rev_array2 = np.flip(array2)
print("Reversed 2-D Matrix:\n", rev_array2, "\n")

OP:

Reversed 1-D Matrix:
 [89  7  5  4  2] 

Row reversed 2-D Matrix:
 [[ 2  1  0 45 22]
 [23 45  2  5 34]
 [ 4 56 78 89 90]
 [ 1  4  6  8  2]] 

column reversed 2-D matrix:
 [[ 2  8  6  4  1]
 [90 89 78 56  4]
 [34  5  2 45 23]
 [22 45  0  1  2]] 

Reversed 2-D Matrix:
 [[22 45  0  1  2]
 [34  5  2 45 23]
 [90 89 78 56  4]
 [ 2  8  6  4  1]]

2.Numeric Datatypes in NumPy

import numpy as np
​
int_array = np.array([10, 20, 30, 40], dtype=np.int_)
​
print(int_array)
 op:

[10 20 30 40]

--Working with numpy.float64 for Decimal Numbers:

import numpy as np
​
float_array = np.array([3.56, 7.89, 89.600, 5.90], dtype=np.float64)
print(float_array)

op:

[ 3.56  7.89 89.6   5.9 ]

--Dealing with numpy.complex128 for Complex Numbers:

import numpy as np
​
complex_array = np.array([1 + 2j, 3 - 4j, 5 + 6j], dtype=np.complex128)
print(complex_array)

op:
[1.+2.j 3.-4.j 5.+6.j]

--Using numpy.bool_ for Boolean Values:

import numpy as np
​
bool_array = np.array([True, False, True], dtype=np.bool_)
print(bool_array)

op:

[ True False  True]

--Using numpy.float16 for Precise but Compact Numbers:

import numpy as np
​
half_float_array = np.array([3.14567, 2.78654], dtype=np.float16)
print(half_float_array)

op:

[3.146 2.787]

3.#NumPy array creation[READ-READ-READ]

4.#NumPy - Indexing & Slicing

import numpy as np
a = np.arange(10)
s = slice(2, 7, 2)
print(a[s])

[2 4 6]

import numpy as np
a = np.arange(10)
b = a[2:7:2]
print(b)

[2 4 6]

import numpy as np
a = np.arange(10)
b = a[5]
print(b)

5

import numpy as np
a = np.arange(10)
print(a[2:])

[2 3 4 5 6 7 8 9]

import numpy as np
a = np.arange(10)
print(a[2:5])

[2 3 4]

import numpy as np
a = np.array([[1,2,3],[3,4,5],[4,5,67]])
print(a[1:])

[[ 3  4  5]
 [ 4  5 67]]

import numpy as np
a = np.array([[1,2,3],[3,4,5],[4,5,67]])
print("our array is")
print(a)
print("\n")
print("the items in the second column are")
print(a[...,1])
print("\n")
print("the items in the second row are")
print(a[1,...])
print("\n")
print("the items column 1 onwards are")
print(a[...,1:])

our array is
[[ 1  2  3]
 [ 3  4  5]
 [ 4  5 67]]


the items in the second column are
[2 4 5]


the items in the second row are
[3 4 5]


the items column 1 onwards are
[[ 2  3]
 [ 4  5]
 [ 5 67]]

5.#NumPy REshape

import numpy as np
originalarray = np.arange(12)
print("orginal array:\n", originalarray)
reshapedarray1 = np.arange(12).reshape(3, 4)
print("\n reshaped array with 3 rows and 4 columns:\n\n", reshapedarray1)
reshapedarray2 = np.arange(12).reshape(4, 3)
print("\nreshaped array with 4 rows and 3 columns:\n", reshapedarray2)
​
orginal array:
 [ 0  1  2  3  4  5  6  7  8  9 10 11]

 reshaped array with 3 rows and 4 columns:

 [[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]

reshaped array with 4 rows and 3 columns:
 [[ 0  1  2]
 [ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]]

import numpy as np
originalarray = np.arange(12)
print("original array:\n", originalarray)
threedarray = np.arange(12).reshape(2, 3, 2)
print("\nreshaped array, original to 3d:\n", threedarray)

original array:
 [ 0  1  2  3  4  5  6  7  8  9 10 11]

reshaped array, original to 3d:
 [[[ 0  1]
  [ 2  3]
  [ 4  5]]

 [[ 6  7]
  [ 8  9]
  [10 11]]]

Using Index Order

import numpy as np
originalarray = np.arange(8)
print("original array:\n", originalarray)
reshapedarray1 = np.arange(8).reshape(4, 2, order='c')
print("\n reshaped arrays with 4 rows and 2 coumns by using c index order:\n", reshapedarray1)

original array:
 [0 1 2 3 4 5 6 7]

 reshaped arrays with 4 rows and 2 coumns by using c index order:
 [[0 1]
 [2 3]
 [4 5]
 [6 7]]

Unknown Dimension

import numpy as np
originaarray = np.arange(12)
print("original array:\n", originalarray)
reshapedarray1 = np.arange(12).reshape(3, 4, -1)
print("\n converted array:\n\n", reshapedarray1)

original array:
 [0 1 2 3 4 5 6 7]

 converted array:

 [[[ 0]
  [ 1]
  [ 2]
  [ 3]]

 [[ 4]
  [ 5]
  [ 6]
  [ 7]]

 [[ 8]
  [ 9]
  [10]
  [11]]]

Flattening the Array


import numpy as np
twodarray = np.array([[1,2,3],[4,5,6]])
print("2d array:\n", twodarray)
flattenedarray = twodarray.reshape(-1)
print("\nflattened array:\n", flattenedarray)

2d array:
 [[1 2 3]
 [4 5 6]]

flattened array:
 [1 2 3 4 5 6]

----------------date:01/07/2024-------------------------------

NumPy - Iterating Over Array

import numpy as np
a = np.arange(0, 60, 5)
a = a.reshape(3, 4)
​
print("original array is:")
print(a)
print("\n")
​
print("modified array is")
for x in np.nditer(a):
    print(x)

OP:

original array is:
[[ 0  5 10 15]
 [20 25 30 35]
 [40 45 50 55]]


modified array is
0
5
10
15
20
25
30
35
40
45
50
55
Example2

import numpy as np
a = np.arange(0, 60, 5)
a = a.reshape(3, 4)
​
print("original array is:")
print(a)
print("\n")
​
print("transpose of the original array is:")
b = a.T
print(b)
print("\n")
​
print("modified array is:")
for x in np.nditer(b):
    print(x)

OP:

original array is:
[[ 0  5 10 15]
 [20 25 30 35]
 [40 45 50 55]]


transpose of the original array is:
[[ 0 20 40]
 [ 5 25 45]
 [10 30 50]
 [15 35 55]]


modified array is:
0
5
10
15
20
25
30
35
40
45
50
55

Iteration Order

import numpy as np
a = np.arange(0, 60, 5)
a = a.reshape(3, 4)
print("original array is:")
print(a)
print("\n")
​
print("transpose of the original array is:")
b = a.T
print(b)
print("\n")
​
print("sorted in c style order:")
c = b.copy(order = 'C')
print(c)
for x in np.nditer(c):
    print(x)
    
print("\n")
​
print("sorted in F-style order:")
c = b.copy(order = 'F')
print(c)
for x in np.nditer(c):
    print(x)

OP:

original array is:
[[ 0  5 10 15]
 [20 25 30 35]
 [40 45 50 55]]


transpose of the original array is:
[[ 0 20 40]
 [ 5 25 45]
 [10 30 50]
 [15 35 55]]


sorted in c style order:
[[ 0 20 40]
 [ 5 25 45]
 [10 30 50]
 [15 35 55]]
0
20
40
5
25
45
10
30
50
15
35
55


sorted in F-style order:
[[ 0 20 40]
 [ 5 25 45]
 [10 30 50]
 [15 35 55]]
0
5
10
15
20
25
30
35
40
45
50
55
Example2

import numpy as np
a = np.arange(0, 60, 5)
a = a.reshape(3, 4)
​
print("original array is:")
print(a)
print("\n")
​
print("sorted in c-style order:")
for x in np.nditer(a, order = 'C'):
    print(x)
print("\n")
​
print("sorted in F-style order:")
for x in np.nditer(a, order = 'F'):
    print(x)

OP:

original array is:
[[ 0  5 10 15]
 [20 25 30 35]
 [40 45 50 55]]


sorted in c-style order:
0
5
10
15
20
25
30
35
40
45
50
55


sorted in F-style order:
0
20
40
5
25
45
10
30
50
15
35
55

Modifying Array Values

import numpy as np
a = np.arange(0, 60, 5)
a = a.reshape(3, 4)
print("original array is:")
print(a)
print("\n")
​
for x in np.nditer(a, op_flags = ['readwrite']):
    x[...] = 2*x
print("modified array is:")
print(a)

OP:

original array is:
[[ 0  5 10 15]
 [20 25 30 35]
 [40 45 50 55]]


modified array is:
[[  0  10  20  30]
 [ 40  50  60  70]
 [ 80  90 100 110]]

External Loop

import numpy as np
a = np.arange(0, 60, 5)
a = a.reshape(3, 4)
​
print("orignal array is:")
print(a)
print("\n")
​
print("modified array is:")
for x in np.nditer(a, flags = ['external_loop'], order = 'F'):
    print(x)

OP:

orignal array is:
[[ 0  5 10 15]
 [20 25 30 35]
 [40 45 50 55]]


modified array is:
[ 0 20 40]
[ 5 25 45]
[10 30 50]
[15 35 55]

..Broadcasting Iteration

import numpy as np
a = np.arange(0, 60, 5)
a = a.reshape(3, 4)
​
print("first array is:")
print(a)
print("\n")
​
print("second array is:")
b = np.array([1,2,3,4], dtype = int)
print(b)
print("\n")
​
print("modified array is:")
for x,y in np.nditer([a,b]):
    print("%d:%d" % (x,y))

OP:

first array is:
[[ 0  5 10 15]
 [20 25 30 35]
 [40 45 50 55]]


second array is:
[1 2 3 4]


modified array is:
0:1
5:2
10:3
15:4
20:1
25:2
30:3
35:4
40:1
45:2
50:3
55:4


----String Operations in NumPy

1.•• Combining Strings using np.char.add()

import numpy as np
s1 = np.array(['Hello','World'])
s2 = np.array([' World',' Revolves'])
ans = np.char.add(s1, s2)
​
print(ans)

['Hello World' 'World Revolves']

2. Repeating Strings using np.char.multiply()
​
import numpy as np
​
string = np.array(['Wow '])
repeated = np.char.multiply(string, 3)
​
print(repeated)

['Wow Wow Wow ']

3. Capitalizing First Letter using np.char.capitalize()

import numpy as np
​
text = np.array(['hello', 'world'])
capitalized = np.char.capitalize(text)
​
print(capitalized)

['Hello' 'World']

4. Changing Case using np.char.lower() and np.char.upper()

import numpy as np
​
text = np.array(['Hello', 'World'])
lower_case = np.char.lower(text)
upper_case = np.char.upper(text)
​
print(lower_case)
print(upper_case)

['hello' 'world']
['HELLO' 'WORLD']

5.  Splitting Strings using np.char.split()

import numpy as np
​
sentence = np.array(['Python is Fun'])
words = np.char.split(sentence)
​
print(words)

[list(['Python', 'is', 'Fun'])]


----NumPy Joining Array

Join two arrays


import numpy as np
​
arr1 = np.array([1, 2, 3])
​
arr2 = np.array([4, 5, 6])
​
arr = np.concatenate((arr1, arr2))
​
print(arr)

[1 2 3 4 5 6]

Join two 2-D arrays along rows (axis=1):


import numpy as np
​
arr1 = np.array([[1, 2], [3, 4]])
​
arr2 = np.array([[5, 6], [7, 8]])
​
arr = np.concatenate((arr1, arr2), axis = 1)
​
print(arr)

[[1 2 5 6]
 [3 4 7 8]]

Joining Arrays Using Stack Functions

import numpy as np
​
arr1 = np.array([1, 2, 3])
​
arr2 = np.array([4, 5, 6])
​
arr = np.stack((arr1, arr2), axis = 1)
​
print(arr)

[[1 4]
 [2 5]
 [3 6]]

Stacking Along Rows

import numpy as np
​
arr1 = np.array([1, 2, 3])
​
arr2 = np.array([4, 5, 6])
​
arr = np.hstack((arr1, arr2))
​
print(arr)

[1 2 3 4 5 6]

Stacking Along Columns


import numpy as np
​
arr1 = np.array([1, 2, 3])
​
arr2 = np.array([4, 5, 6])
​
arr = np.vstack((arr1, arr2))
​
print(arr)

[[1 2 3]
 [4 5 6]]

Stacking Along Height (depth)

import numpy as np
​
arr1 = np.array([1, 2, 3])
​
arr2 = np.array([4, 5, 6])
​
arr = np.dstack((arr1, arr2))
​
print(arr)

[[[1 4]
  [2 5]
  [3 6]]]


----NumPy Searching Arrays

import numpy as np
​
arr = np.array([1, 2, 3, 4, 5, 4, 4])
​
x = np.where(arr == 4)
​
print(x)

(array([3, 5, 6], dtype=int64),)

import numpy as np
​
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])
​
x = np.where(arr % 2 == 0)
​
print(x)

(array([1, 3, 5, 7], dtype=int64),)

import numpy as np
​
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])
​
x = np.where(arr % 2 == 1)
​
print(x)

(array([0, 2, 4, 6], dtype=int64),)

..Search Sorted

import numpy as np
​
arr = np.array([6, 7, 8, 9])
​
x = np.searchsorted(arr, 7)
​
print(x)

1

..Search From the Right Side

import numpy as np
​
arr = np.array([6, 7, 8, 9])
​
x= np.searchsorted(arr, 7, side = 'right')
​
print(x)

2

..Multiple Values

import numpy as np
​
arr = np.array([1, 3, 5, 7])
​
x = np.searchsorted(arr, [2, 4, 6])
​
print(x)

[1 2 3]
