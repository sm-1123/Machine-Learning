--------------------------------------date:30/06/2024----------------------------------------------------

#Basic-Operations

..Using Python Lists..

import numpy as np

array_1d = np.array([1,2,3,4,5])

array_2d = np.array([[1,2,3,4,5],[6,7,8,9,10]])

array_3d = np.array([[[1,2,3,4,5],[6,7,8,9,10]],[[11,12,13,14,15],[16,17,18,19,20]]])

print("one-dimensional array:\n",array_1d,"\n\n")

print("two-dimensional array:\n",array_2d,"\n\n")

print("three-dimensional array",array_3d,"\n\n")

OP--
one-dimensional array:
 [1 2 3 4 5] 


two-dimensional array:
 [[ 1  2  3  4  5]
 [ 6  7  8  9 10]] 


three-dimensional array [[[ 1  2  3  4  5]
  [ 6  7  8  9 10]]

 [[11 12 13 14 15]
  [16 17 18 19 20]]] 

--Using Functions available in the NumPy Package--

import numpy as np
​
array1 = np.arange(6)
​
print(array1,"\n")
​
array2 = np.arange(4, 16, 2)
​
print(array2,"\n")
​
array3 = np.arange(4.2, 5, 0.2, dtype = 'float')
​
print(array3,"\n")

OP--

[0 1 2 3 4 5] 

[ 4  6  8 10 12 14] 

[4.2 4.4 4.6 4.8] 

--NumPy.eye--

import numpy as np
​
array1 = np.eye(3)
​
print(array1,"\n")
​
array2 = np.eye(4, 5)
​
print(array2,"\n")

OP:

[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]] 

[[1. 0. 0. 0. 0.]
 [0. 1. 0. 0. 0.]
 [0. 0. 1. 0. 0.]
 [0. 0. 0. 1. 0.]] 

--NumPy.diag--

import numpy as np
​
array1 = np.diag([4,5,6,7])
​
print(array1,"\n")
​
array2 = np.diag([4,5,6], 2)
​
print(array2,"\n")
​
array3 = np.diag(np.array([[1,2],[3,4]]))
​
print(array3,"\n")

OP-

[[4 0 0 0]
 [0 5 0 0]
 [0 0 6 0]
 [0 0 0 7]] 

[[0 0 4 0 0]
 [0 0 0 5 0]
 [0 0 0 0 6]
 [0 0 0 0 0]
 [0 0 0 0 0]] 

[1 4] 

--General Functions to create arrays--

import numpy as np
​
array1 = np.zeros((4,5))
print("Array1:\n",array1,"\n")
​
array2 = np.zeros((3, 2, 2))
print("Array2:\n", array2, "\n")
​
array3 = np.ones((2, 3))
print("Array3:\n", array3, "\n")
​
array4 = np.ones((4, 3, 2))
print("Array4:\n", array4, "\n")
​
array5 = np.random.rand(3,2)
print("Array5:\n", array5, "\n")
​
array6 = np.random.rand(2, 2, 3)
print("Array6:\n", array6, "\n")

Array1:
 [[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]] 

Array2:
 [[[0. 0.]
  [0. 0.]]

 [[0. 0.]
  [0. 0.]]

 [[0. 0.]
  [0. 0.]]] 

Array3:
 [[1. 1. 1.]
 [1. 1. 1.]] 

Array4:
 [[[1. 1.]
  [1. 1.]
  [1. 1.]]

 [[1. 1.]
  [1. 1.]
  [1. 1.]]

 [[1. 1.]
  [1. 1.]
  [1. 1.]]

 [[1. 1.]
  [1. 1.]
  [1. 1.]]] 

OP:
Array5:
 [[0.24933419 0.71629229]
 [0.57576651 0.26428002]
 [0.42406954 0.36365501]] 

Array6:
 [[[0.0781685  0.6916443  0.15121047]
  [0.44929717 0.71678412 0.99676292]]

 [[0.75110745 0.25304031 0.82793972]
  [0.58526911 0.84239861 0.4209105 ]]] 

​--Sort--

import numpy as np
​
array1 = np.array([12, 1, 60, 45, 56, 3])
sorted_array1 = np.sort(array1)
print("Sorted Array:\n", sorted_array1,"\n")
​
array2 = np.array([[12, 45, 2],[4, 56, 9]])
sorted_array2 = np.sort(array2, axis=0)
print("Column sorted 2-D array", sorted_array2,"\n")
​
sorted_array3 = np.sort(array2, axis=1)
print("Row sorted 2-D array", sorted_array3, "\n")

OP:
Sorted Array:
 [ 1  3 12 45 56 60] 

Column sorted 2-D array [[ 4 45  2]
 [12 56  9]] 

Row sorted 2-D array [[ 2 12 45]
 [ 4  9 56]] 

--Reverse--

import numpy as np
​
array1 = np.array([2,4,5,7,89])
rev_array1 = np.flip(array1)
print("Reversed 1-D Matrix:\n", rev_array1, "\n")
​
array2 = np.array([[1,4,6,8,2],[4,56,78,89,90],[23,45,2,5,34],[2,1,0,45,22]])
rev_rows_array2 = np.flip(array2, axis=0)
print("Row reversed 2-D Matrix:\n", rev_rows_array2,"\n")
​
rev_cols_array2 = np.flip(array2, axis=1)
print("column reversed 2-D matrix:\n", rev_cols_array2, "\n")
​
rev_array2 = np.flip(array2)
print("Reversed 2-D Matrix:\n", rev_array2, "\n")

OP:

Reversed 1-D Matrix:
 [89  7  5  4  2] 

Row reversed 2-D Matrix:
 [[ 2  1  0 45 22]
 [23 45  2  5 34]
 [ 4 56 78 89 90]
 [ 1  4  6  8  2]] 

column reversed 2-D matrix:
 [[ 2  8  6  4  1]
 [90 89 78 56  4]
 [34  5  2 45 23]
 [22 45  0  1  2]] 

Reversed 2-D Matrix:
 [[22 45  0  1  2]
 [34  5  2 45 23]
 [90 89 78 56  4]
 [ 2  8  6  4  1]]

2.Numeric Datatypes in NumPy

import numpy as np
​
int_array = np.array([10, 20, 30, 40], dtype=np.int_)
​
print(int_array)
 op:

[10 20 30 40]

--Working with numpy.float64 for Decimal Numbers:

import numpy as np
​
float_array = np.array([3.56, 7.89, 89.600, 5.90], dtype=np.float64)
print(float_array)

op:

[ 3.56  7.89 89.6   5.9 ]

--Dealing with numpy.complex128 for Complex Numbers:

import numpy as np
​
complex_array = np.array([1 + 2j, 3 - 4j, 5 + 6j], dtype=np.complex128)
print(complex_array)

op:
[1.+2.j 3.-4.j 5.+6.j]

--Using numpy.bool_ for Boolean Values:

import numpy as np
​
bool_array = np.array([True, False, True], dtype=np.bool_)
print(bool_array)

op:

[ True False  True]

--Using numpy.float16 for Precise but Compact Numbers:

import numpy as np
​
half_float_array = np.array([3.14567, 2.78654], dtype=np.float16)
print(half_float_array)

op:

[3.146 2.787]

3.#NumPy array creation[READ-READ-READ]

