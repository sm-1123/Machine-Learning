P1:Create a dataframe from List:

import pandas as pd

def createDataframe(student_data: List[List[int]]) -> pd.DataFrame:

    columns_names = ["student_id", "age"]

    result_data = pd.DataFrame(student_data, columns = columns_names)

    return result_data

P2:Get the size of a dataframe:

import pandas as pd

def getDataframeSize(players: pd.DataFrame) -> List[int]:

    return [players.shape[0], players.shape[1]]

P3:Display the first three rows

import pandas as pd

def selectFirstRows(employees: pd.DataFrame) -> pd.DataFrame:

    return employees.head(3)

P4:Select data

import pandas as pd

def selectData(students: pd.DataFrame) -> pd.DataFrame:

    return students.loc[students['student_id'] == 101, ['name', 'age']]
    
P5:Create a New column:

import pandas as pd

def createBonusColumn(employees: pd.DataFrame) -> pd.DataFrame:

    employees['bonus'] = employees['salary'] * 2

    return employees

-------------------------date:06/07/2024----------------------------------------------

P6:Drop Duplicate Rows:

import pandas as pd

def dropDuplicateEmails(customers: pd.DataFrame) -> pd.DataFrame:

    customers.drop_duplicates(subset='email', keep='first', inplace=True)

    return customers

P7:Drop Missing Data:

import pandas as pd

def dropMissingData(students: pd.DataFrame) -> pd.DataFrame:

    students.dropna(subset=['name'], inplace=True)

    return students

P8:Modify Columns:

import pandas as pd

def modifySalaryColumn(employees: pd.DataFrame) -> pd.DataFrame:

    employees['salary'] = employees['salary'] * 2

    return employees

P9:Rename Columns:

import pandas as pd

import pandas as pd

def renameColumns(students: pd.DataFrame) -> pd.DataFrame:

    students = students.rename(
            columns={
                "id": "student_id",
                "first": "first_name",
                "last": "last_name",
                "age": "age_in_years",
            }
        )

    return students

P10:Change Datatypes:

import pandas as pd

def changeDatatype(students: pd.DataFrame) -> pd.DataFrame:

    students = students.astype({'grade': int})

    return students

P11:Fill Missing Data:

import pandas as pd

def fillMissingValues(products: pd.DataFrame) -> pd.DataFrame:

    products['quantity'].fillna(0, inplace=True)

    return products

P12:Reshape Data or Concatenate:

import pandas as pd

def concatenateTables(df1: pd.DataFrame, df2: pd.DataFrame) -> pd.DataFrame:

    return pd.concat([df1, df2], axis=0)

P13:Reshape Data:Pivot:

import pandas as pd

def pivotTable(weather: pd.DataFrame) -> pd.DataFrame:

    ans = weather.pivot(index='month', columns='city', values='temperature')

    return ans

P14:Reshape Data: Melt:

import pandas as pd

def meltTable(report: pd.DataFrame) -> pd.DataFrame:

    report = report.melt(
        id_vars=["product"],
        value_vars=["quarter_1", "quarter_2", "quarter_3", "quarter_4"],
        var_name="quarter",
        value_name="sales",
    )
    return report

P15:Method Channing:

import pandas as pd

def findHeavyAnimals(animals: pd.DataFrame) -> pd.DataFrame:

    return animals[animals['weight'] > 100].sort_values(by='weight', ascending=False)[['name']]
    
