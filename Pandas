-------------------------date:02/07/2024-------------------------------------
..
import pandas as pd

data = {
    'Name':['Rahul', 'Rohit', 'Virat'],
    'Age':[25, 30, 18],
    'City':['Vizag', 'Mumbai', 'Delhi']
}

df = pd.DataFrame(data)

print("Original DataFrame:")

print(df)

df['Playing Style'] = ['Classic', 'Hitman', 'Perfectioist']

print("\n DataFrame with a new column:")

print(df)

Original DataFrame:
    Name  Age    City
0  Rahul   25   Vizag
1  Rohit   30  Mumbai
2  Virat   18   Delhi

 DataFrame with a new column:
    Name  Age    City Playing Style
0  Rahul   25   Vizag       Classic
1  Rohit   30  Mumbai        Hitman
2  Virat   18   Delhi  Perfectioist
Features of Pandas

How to create a Series in Pandas

ser
import pandas as pd
​
import numpy as np
​
ser = pd.Series()
​
print(ser)
​
data = np.array(['n', 'i', 'n', 'j', 'a', 's'])
​
ser = pd.Series(data)
​
print(ser)
Series([], dtype: float64)
0    n
1    i
2    n
3    j
4    a
5    s
dtype: object
C:\Users\Sourav Mukherjee\AppData\Local\Temp\ipykernel_25544\3724197521.py:5: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  ser = pd.Series()
How to create a Dataframe in Pandas

df
import pandas as pd
​
df = pd.DataFrame()
​
print(df)
​
I = ['n', 'i', 'n', 'j', 'a', 's']
​
df = pd.DataFrame(I, columns = ['Letters'])
​
print(df)
Empty DataFrame
Columns: []
Index: []
  Letters
0       n
1       i
2       n
3       j
4       a
5       s
Reading CSV file

import pandas as pd
​
data = pd.read_csv('filename.csv')
​
print(data.head())
         date column_name  column_name1  column_name2
0  2022-01-01           A            10             5
1  2022-01-01           A            20             6
2  2022-01-01           B            15             7
3  2022-01-02           A            12             4
4  2022-01-02           B            18             6
Selecting Rows and Columns

import pandas as pd
​
data = pd.read_csv('filename.csv')
​
subset = data.loc[(data['column_name'] == 'A'), ['column_name1', 'column_name2']]
​
print(subset.head())
   column_name1  column_name2
0            10             5
1            20             6
3            12             4
6             9             3
Grouping and Aggregating Data

import pandas as pd
​
data = pd.read_csv('filename.csv')
​
grouped_data= data.groupby('column_name').agg({'column_name1':'sum', 'column_name2':'mean'})
​
print(grouped_data.head())
             column_name1  column_name2
column_name                            
A                      51           4.5
B                      82           6.4


##Difference Between NumPy and Pandas

Example of NumPy

import numpy as np
​
myArr = np.random.rand(2, 3)
​
print("Array is:", myArr)
​
print("Shape of the array is:", myArr.shape)
​
print("Number of dimensions:", myArr.ndim)
​
print("Sum of all elements is:", myArr.size)
​
print("Minimum value is:", myArr.min(), "and maximum value is:", myArr.max())
Array is: [[0.46500842 0.5716122  0.65411433]
 [0.87631066 0.41650137 0.8444056 ]]
Shape of the array is: (2, 3)
Number of dimensions: 2
Sum of all elements is: 6
Minimum value is: 0.4165013728456892 and maximum value is: 0.8763106577031533
Pandas in Python

Example of Pandas

subset
import pandas as pd
​
ninjasData = {'name':['Ninja1','Ninja2','Ninja3','Ninja4','Ninja5'],'age':[20,30,18,42,22],'city':['Mathura','Vrindavan','Lucknow','Delhi','Patna']}
​
dataFrame = pd.DataFrame(ninjasData)
​
print(dataFrame)
​
print()
​
mean_age = dataFrame['age'].mean()
​
print("Mean age is:", mean_age)
​
subset = dataFrame[dataFrame['age'] > 25]
​
print("Subset of dataFrame is:")
​
print(subset)
     name  age       city
0  Ninja1   20    Mathura
1  Ninja2   30  Vrindavan
2  Ninja3   18    Lucknow
3  Ninja4   42      Delhi
4  Ninja5   22      Patna

Mean age is: 26.4
Subset of dataFrame is:
     name  age       city
1  Ninja2   30  Vrindavan
3  Ninja4   42      Delhi

--------------------------------date:03/07/2024------------------------------------

Labels in Pandas Series

Creating Labels

Manual Label Assignment

import pandas as pd
​
data = [12,17,22,75]
​
labels = ['Aditya','Pradeep','Tanish','Bhavesh']
​
series = pd.Series(data,index=labels)
​
print(series)
Aditya     12
Pradeep    17
Tanish     22
Bhavesh    75
dtype: int64
Using Default Numeric Index

import pandas as pd
​
data = [12,17,22,75]
​
series = pd.Series(data)
​
print(series)
0    12
1    17
2    22
3    75
dtype: int64
Date-based Labels

e
import pandas as pd
​
import datetime
​
data = [12,17,22,75]
​
dates = [datetime.date(2024,9,1),datetime.date(2024,9,2),datetime.date(2024,9,3),datetime.date(2024,9,4)]
​
series = pd.Series(data,index=dates)
​
print(series)
2024-09-01    12
2024-09-02    17
2024-09-03    22
2024-09-04    75
dtype: int64
Using Python Range

import pandas as pd
​
data = [12,17,22,75]
​
labels = list(range(1, 5))
​
series = pd.Series(data, index=labels)
​
print(series)
1    12
2    17
3    22
4    75
dtype: int64
Converting a Dictionary to a Series

import pandas as pd
​
data_dict = {'Aditya':12,'Pradeep':17,'Tanish':22,'Bhavesh':75}
​
series = pd.Series(data_dict)
​
print(series)
Aditya     12
Pradeep    17
Tanish     22
Bhavesh    75
dtype: int64
Accessing Labels Using Label

Using Square Brackets ([ ])

import pandas as pd
​
data_dict = {'Aditya':12,'Pradeep':17,'Tanish':22,'Bhavesh':75}
​
series = pd.Series(data_dict)
​
value_at_Aditya = series['Aditya']
​
print(value_at_Aditya)
12
Using .loc[ ] Indexer

import pandas as pd
​
data_dict = {'Aditya':12,'Pradeep':17,'Tanish':22,'Bhavesh':75}
​
series = pd.Series(data_dict)
​
value_at_Pradeep = series.loc['Pradeep']
​
print(value_at_Pradeep)
17
Label-based Slicing

subset
import pandas as pd
​
data_dict = {'Aditya':12,'Pradeep':17,'Tanish':22,'Bhavesh':75}
​
series = pd.Series(data_dict)
​
subset = series['Pradeep':'Bhavesh']
​
print(subset)
Pradeep    17
Tanish     22
Bhavesh    75
dtype: int64
Conditional Selection with Labels

import pandas as pd
​
data_dict = {'Aditya':12,'Pradeep':17,'Tanish':22,'Bhavesh':75}
​
series = pd.Series(data_dict)
​
result = series[series > 25]
​
print(result)
Bhavesh    75
dtype: int64
Key/Value Objects as Series

import pandas as pd
​
data_dict = {'Aditya':12,'Pradeep':17,'Tanish':22,'Bhavesh':75}
​
series = pd.Series(data_dict)
​
print(series)
Aditya     12
Pradeep    17
Tanish     22
Bhavesh    75
dtype: int64
